import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:encrypt/encrypt.dart' as encrypt;
import 'package:jwt_decoder/jwt_decoder.dart';
import 'package:speech_to_text/speech_to_text.dart';
import 'package:flame/game.dart';
import 'package:flutter_tailwindcss/flutter_tailwindcss.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:html/parser.dart' show parse;
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:web3dart/web3dart.dart';
import 'dart:math';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await _initNotifications();
  runApp(R3AL3RApp());
}

FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

Future<void> _initNotifications() async {
  const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('app_icon');
  final IOSInitializationSettings initializationSettingsIOS = IOSInitializationSettings();
  final InitializationSettings initializationSettings = InitializationSettings(
    android: initializationSettingsAndroid,
    iOS: initializationSettingsIOS,
  );
  await flutterLocalNotificationsPlugin.initialize(initializationSettings);
}

Future<void> _showNotification(String title, String body) async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics = AndroidNotificationDetails(
    'r3al3r_channel', 'R3AL3R Notifications', 'Notifications for R3AL3R AI',
    importance: Importance.max,
    priority: Priority.high,
  );
  const NotificationDetails platformChannelSpecifics = NotificationDetails(android: androidPlatformChannelSpecifics);
  await flutterLocalNotificationsPlugin.show(0, title, body, platformChannelSpecifics);
}

String sanitizeInput(String input) {
  final document = parse(input);
  return document.body?.text ?? input;
}

class R3AL3RApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'R3AL3R AI',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      initialRoute: '/login',
      routes: {
        '/login': (context) => LoginScreen(),
        '/dashboard': (context) => DashboardScreen(),
        '/query': (context) => QueryScreen(),
        '/game': (context) => GameScreen(),
        '/ethical': (context) => EthicalReviewScreen(),
      },
    );
  }
}

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _userIdController = TextEditingController();
  final TextEditingController _soulKeyController = TextEditingController();
  String _error = '';
  final storage = FlutterSecureStorage();

  Future<void> _login() async {
    final userId = sanitizeInput(_userIdController.text);
    final soulKey = sanitizeInput(_soulKeyController.text);
    final key = encrypt.Key.fromUtf8(soulKey.padRight(32, '0'));
    final encrypter = encrypt.Encrypter(encrypt.AES(key));
    final encrypted = encrypter.encrypt(userId, iv: encrypt.IV.fromLength(16));
    
    try {
      if (kIsWeb) {
        // Mock WebAuthn for web login
        final credentials = Credentials.random();
        await storage.write(key: 'webauthn_credentials', value: credentials.privateKey.toString());
      }
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/transfer'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'user_id': userId,
          'soul_key': encrypted.base64,
          'ethical': true,
        }),
      );
      if (response.statusCode == 200) {
        final token = jsonDecode(response.body)['token'];
        final refreshToken = jsonDecode(response.body).get('refresh_token', token);
        if (!JwtDecoder.isExpired(token)) {
          await storage.write(key: 'token', value: token);
          await storage.write(key: 'refresh_token', value: refreshToken);
          await storage.write(key: 'user_id', value: userId);
          Navigator.pushReplacementNamed(context, '/dashboard', arguments: {'token': token, 'user_id': userId});
        } else {
          setState(() => _error = 'Invalid or expired token');
        }
      } else {
        setState(() => _error = 'Login failed');
      }
    } catch (e) {
      setState(() => _error = 'Error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('R3AL3R AI Login')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            TailwindTextField(
              controller: _userIdController,
              label: 'User ID',
              placeholder: 'Enter your user ID',
            ),
            TailwindTextField(
              controller: _soulKeyController,
              label: 'Soul Key',
              placeholder: 'Enter your soul key',
              obscureText: true,
            ),
            TailwindButton(
              onPressed: _login,
              child: Text('Login'),
              className: 'bg-blue-500 text-white p-2 rounded',
            ),
            if (_error.isNotEmpty)
              Text(_error, style: TextStyle(color: Colors.red)),
          ],
        ),
      ),
    );
  }
}

class DashboardScreen extends StatefulWidget {
  @override
  _DashboardScreenState createState() => _DashboardScreenState();
}

class _DashboardScreenState extends State<DashboardScreen> {
  String _insight = 'Loading...';
  String _globalIdea = 'Loading...';
  String _recommendation = 'Loading...';
  String _profileSummary = 'Loading...';
  final SpeechToText _speech = SpeechToText();
  bool _speechEnabled = false;
  String _userId = '';
  final storage = FlutterSecureStorage();

  @override
  void initState() {
    super.initState();
    _initSpeech();
    _fetchInsight();
    _fetchGlobalIdea();
    _fetchRecommendation();
    _fetchProfile();
    _checkEthicalQueue();
  }

  void _initSpeech() async {
    _speechEnabled = await _speech.initialize(
      options: [SpeechToText.androidIntentLookup, SpeechToText.partialResults],
    );
    setState(() {});
  }

  Future<void> _refreshToken() async {
    final refreshToken = await storage.read(key: 'refresh_token');
    if (refreshToken != null) {
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/refresh_token'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'refresh_token': refreshToken}),
      );
      if (response.statusCode == 200) {
        final newToken = jsonDecode(response.body)['token'];
        await storage.write(key: 'token', value: newToken);
        return;
      }
    }
    Navigator.pushReplacementNamed(context, '/login');
  }

  Future<void> _fetchInsight() async {
    final cached = await storage.read(key: 'insight');
    if (cached != null) {
      setState(() => _insight = cached);
      return;
    }
    try {
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/api/insight'),
        headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $token'},
        body: jsonEncode({
          'input': {'intent': 'query_market_prediction'},
          'task_type': 'prediction',
        }),
      );
      if (response.statusCode == 200) {
        final insight = jsonDecode(response.body)['insight'];
        await storage.write(key: 'insight', value: insight);
        setState(() => _insight = insight);
      }
    } catch (e) {
      setState(() => _insight = 'Error fetching insight');
    }
  }

  Future<void> _fetchGlobalIdea() async {
    final cached = await storage.read(key: 'global_idea');
    if (cached != null) {
      setState(() => _globalIdea = cached);
      return;
    }
    try {
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.get(
        Uri.parse('https://api.r3al3r.ai/api/global_idea'),
        headers: {'Authorization': 'Bearer $token'},
      );
      if (response.statusCode == 200) {
        final idea = jsonDecode(response.body)['idea'];
        await storage.write(key: 'global_idea', value: idea);
        setState(() => _globalIdea = idea);
      }
    } catch (e) {
      setState(() => _globalIdea = 'Error fetching global idea');
    }
  }

  Future<void> _fetchRecommendation() async {
    final cached = await storage.read(key: 'recommendation');
    if (cached != null) {
      setState(() => _recommendation = cached);
      return;
    }
    try {
      final args = ModalRoute.of(context)!.settings.arguments as Map;
      final userId = args['user_id'];
      _userId = userId;
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/api/query_anything'),
        headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $token'},
        body: jsonEncode({
          'query': 'Personalized recommendation',
          'user_id': userId,
        }),
      );
      if (response.statusCode == 200) {
        final responseId = jsonDecode(response.body)['response_id'];
        for (int i = 0; i < 5; i++) {
          final check = await http.get(
            Uri.parse('https://api.r3al3r.ai/api/ethical_queue'),
            headers: {'Authorization': 'Bearer $token'},
          );
          if (check.statusCode == 200) {
            final queue = jsonDecode(check.body)['queue'];
            final response = queue.firstWhere((r) => r['response_id'] == responseId, orElse: () => null);
            if (response != null && response['approved']) {
              await storage.write(key: 'recommendation', value: response['response']);
              setState(() => _recommendation = response['response']);
              return;
            }
          }
          await Future.delayed(Duration(seconds: 2));
        }
        setState(() => _recommendation = 'Awaiting ethical approval');
      }
    } catch (e) {
      setState(() => _recommendation = 'Error fetching recommendation');
    }
  }

  Future<void> _fetchProfile() async {
    final cached = await storage.read(key: 'profile');
    if (cached != null) {
      setState(() => _profileSummary = cached);
      return;
    }
    try {
      final args = ModalRoute.of(context)!.settings.arguments as Map;
      final userId = args['user_id'];
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/api/query_anything'),
        headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $token'},
        body: jsonEncode({
          'query': 'User profile summary',
          'user_id': userId,
        }),
      );
      if (response.statusCode == 200) {
        final responseId = jsonDecode(response.body)['response_id'];
        for (int i = 0; i < 5; i++) {
          final check = await http.get(
            Uri.parse('https://api.r3al3r.ai/api/ethical_queue'),
            headers: {'Authorization': 'Bearer $token'},
          );
          if (check.statusCode == 200) {
            final queue = jsonDecode(check.body)['queue'];
            final response = queue.firstWhere((r) => r['response_id'] == responseId, orElse: () => null);
            if (response != null && response['approved']) {
              await storage.write(key: 'profile', value: response['response']);
              setState(() => _profileSummary = response['response']);
              return;
            }
          }
          await Future.delayed(Duration(seconds: 2));
        }
        setState(() => _profileSummary = 'Awaiting ethical approval');
      }
    } catch (e) {
      setState(() => _profileSummary = 'Error fetching profile');
    }
  }

  Future<void> _checkEthicalQueue() async {
    try {
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.get(
        Uri.parse('https://api.r3al3r.ai/api/ethical_queue'),
        headers: {'Authorization': 'Bearer $token'},
      );
      if (response.statusCode == 200) {
        final queue = jsonDecode(response.body)['queue'];
        if (queue.isNotEmpty) {
          await _showNotification('Ethical Review Needed', 'New responses awaiting your approval');
        }
      }
    } catch (e) {
      print('Error checking ethical queue: $e');
    }
  }

  void _startListening() async {
    if (_speechEnabled) {
      await _speech.listen(
        onResult: (result) async {
          if (result.finalResult) {
            final query = sanitizeInput(result.recognizedWords);
            final token = await storage.read(key: 'token');
            if (JwtDecoder.isExpired(token!)) await _refreshToken();
            final response = await http.post(
              Uri.parse('https://api.r3al3r.ai/api/query_anything'),
              headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $token'},
              body: jsonEncode({
                'query': query,
                'user_id': _userId,
              }),
            );
            if (response.statusCode == 200) {
              final responseId = jsonDecode(response.body)['response_id'];
              for (int i = 0; i < 5; i++) {
                final check = await http.get(
                  Uri.parse('https://api.r3al3r.ai/api/ethical_queue'),
                  headers: {'Authorization': 'Bearer $token'},
                );
                if (check.statusCode == 200) {
                  final queue = jsonDecode(check.body)['queue'];
                  final response = queue.firstWhere((r) => r['response_id'] == responseId, orElse: () => null);
                  if (response != null && response['approved']) {
                    await storage.write(key: 'insight', value: response['response']);
                    setState(() => _insight = response['response']);
                    return;
                  }
                }
                await Future.delayed(Duration(seconds: 2));
              }
              setState(() => _insight = 'Awaiting ethical approval');
            }
          }
        },
        listenFor: Duration(seconds: 30),
        pauseFor: Duration(seconds: 5),
        sampleRate: 16000,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('R3AL3R AI Dashboard'),
        actions: [
          IconButton(
            icon: Icon(Icons.admin_panel_settings),
            onPressed: () => Navigator.pushNamed(context, '/ethical'),
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            TailwindCard(
              className: 'm-4 p-4 bg-gray-100 rounded',
              child: Text('Insight: $_insight'),
            ),
            TailwindCard(
              className: 'm-4 p-4 bg-gray-100 rounded',
              child: Text('Global Impact Idea: $_globalIdea'),
            ),
            TailwindCard(
              className: 'm-4 p-4 bg-gray-100 rounded',
              child: Text('Personalized Recommendation: $_recommendation'),
            ),
            TailwindCard(
              className: 'm-4 p-4 bg-gray-100 rounded',
              child: Text('Your Profile: $_profileSummary'),
            ),
            TailwindButton(
              onPressed: () => Navigator.pushNamed(context, '/query', arguments: {'user_id': _userId}),
              child: Text('Ask Anything'),
              className: 'bg-purple-500 text-white p-2 rounded m-4',
            ),
            TailwindButton(
              onPressed: () => Navigator.pushNamed(context, '/game'),
              child: Text('Play Market Game'),
              className: 'bg-green-500 text-white p-2 rounded m-4',
            ),
            TailwindButton(
              onPressed: _startListening,
              child: Text(_speech.isListening ? 'Listening...' : 'Speak'),
              className: 'bg-blue-500 text-white p-2 rounded m-4',
            ),
          ],
        ),
      ),
    );
  }
}

class QueryScreen extends StatefulWidget {
  @override
  _QueryScreenState createState() => _QueryScreenState();
}

class _QueryScreenState extends State<QueryScreen> {
  final TextEditingController _queryController = TextEditingController();
  final TextEditingController _feedbackController = TextEditingController();
  String _response = 'Enter a query to get started';
  String _userId = '';
  String _responseId = '';
  String _feedbackStatus = '';
  final storage = FlutterSecureStorage();

  @override
  void initState() {
    super.initState();
    final args = ModalRoute.of(context)!.settings.arguments as Map;
    _userId = args['user_id'];
  }

  Future<void> _submitQuery() async {
    final query = sanitizeInput(_queryController.text);
    final cached = await storage.read(key: 'query_$query');
    if (cached != null) {
      setState(() => _response = cached);
      return;
    }
    try {
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/api/query_anything'),
        headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $token'},
        body: jsonEncode({
          'query': query,
          'user_id': _userId,
        }),
      );
      if (response.statusCode == 200) {
        final responseId = jsonDecode(response.body)['response_id'];
        _responseId = responseId;
        for (int i = 0; i < 5; i++) {
          final check = await http.get(
            Uri.parse('https://api.r3al3r.ai/api/ethical_queue'),
            headers: {'Authorization': 'Bearer $token'},
          );
          if (check.statusCode == 200) {
            final queue = jsonDecode(check.body)['queue'];
            final response = queue.firstWhere((r) => r['response_id'] == responseId, orElse: () => null);
            if (response != null && response['approved']) {
              await storage.write(key: 'query_$query', value: response['response']);
              setState(() => _response = response['response']);
              return;
            }
          }
          await Future.delayed(Duration(seconds: 2));
        }
        setState(() => _response = 'Awaiting ethical approval');
      } else {
        setState(() => _response = 'Error processing query');
      }
    } catch (e) {
      setState(() => _response = 'Error: $e');
    }
  }

  Future<void> _submitFeedback() async {
    final rating = sanitizeInput(_feedbackController.text);
    if (!RegExp(r'^[1-5]$').hasMatch(rating)) {
      setState(() => _feedbackStatus = 'Invalid rating (1-5)');
      return;
    }
    try {
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/api/feedback'),
        headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $token'},
        body: jsonEncode({
          'user_id': _userId,
          'response_id': _responseId,
          'rating': rating,
        }),
      );
      if (response.statusCode == 200) {
        setState(() => _feedbackStatus = 'Feedback submitted');
      } else {
        setState(() => _feedbackStatus = 'Feedback submission failed');
      }
    } catch (e) {
      setState(() => _feedbackStatus = 'Error: $e');
    }
  }

  Future<void> _refreshToken() async {
    final refreshToken = await storage.read(key: 'refresh_token');
    if (refreshToken != null) {
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/refresh_token'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'refresh_token': refreshToken}),
      );
      if (response.statusCode == 200) {
        final newToken = jsonDecode(response.body)['token'];
        await storage.write(key: 'token', value: newToken);
        return;
      }
    }
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Ask R3AL3R AI Anything')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            TailwindTextField(
              controller: _queryController,
              label: 'Your Question',
              placeholder: 'Ask anything...',
            ),
            TailwindButton(
              onPressed: _submitQuery,
              child: Text('Submit'),
              className: 'bg-purple-500 text-white p-2 rounded',
            ),
            TailwindCard(
              className: 'm-4 p-4 bg-gray-100 rounded',
              child: Text('Response: $_response'),
            ),
            TailwindTextField(
              controller: _feedbackController,
              label: 'Feedback',
              placeholder: 'Rate this response (1-5)',
            ),
            TailwindButton(
              onPressed: _submitFeedback,
              child: Text('Submit Feedback'),
              className: 'bg-blue-500 text-white p-2 rounded',
            ),
            if (_feedbackStatus.isNotEmpty)
              Text(_feedbackStatus, style: TextStyle(color: _feedbackStatus.contains('Error') ? Colors.red : Colors.green)),
          ],
        ),
      ),
    );
  }
}

class GameScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Market Simulation Game')),
      body: GameWidget(game: MarketGame()),
    );
  }
}

class MarketGame extends FlameGame {
  double portfolio = 10000;
  double stockPrice = 100;
  double aiChallengeTarget = 120;
  int challengeLevel = 1;
  TextPaint textPaint = TextPaint(
    style: TextStyle(fontSize: 24, color: Colors.black),
  );
  bool challengeActive = false;

  @override
  void update(double dt) {
    stockPrice += (Random().nextDouble() - 0.5) * (10 + challengeLevel);
    if (!challengeActive && Random().nextDouble() < 0.01) {
      challengeActive = true;
      aiChallengeTarget = stockPrice * (1 + Random().nextDouble() * (0.1 + challengeLevel * 0.05));
    }
    if (challengeActive && stockPrice >= aiChallengeTarget) {
      portfolio += 1000 * challengeLevel;
      challengeLevel = min(challengeLevel + 1, 5);
      challengeActive = false;
    }
    super.update(dt);
  }

  @override
  void render(Canvas canvas) {
    canvas.drawRect(Rect.fromLTWH(0, 0, size.x, size.y), Paint()..color = Colors.white);
    textPaint.render(
      canvas,
      'Portfolio: \$${portfolio.toStringAsFixed(2)}, Stock: \$${stockPrice.toStringAsFixed(2)}',
      Vector2(50, 50),
    );
    textPaint.render(
      canvas,
      'Challenge Level: $challengeLevel',
      Vector2(50, 80),
    );
    if (challengeActive) {
      textPaint.render(
        canvas,
        'AI Challenge: Reach \$${aiChallengeTarget.toStringAsFixed(2)}',
        Vector2(50, 100),
      );
    }
  }

  void buyStock() {
    portfolio -= stockPrice;
  }

  void sellStock() {
    portfolio += stockPrice;
  }
}

class EthicalReviewScreen extends StatefulWidget {
  @override
  _EthicalReviewScreenState createState() => _EthicalReviewScreenState();
}

class _EthicalReviewScreenState extends State<EthicalReviewScreen> {
  List<dynamic> _queue = [];
  String _status = '';
  final storage = FlutterSecureStorage();

  @override
  void initState() {
    super.initState();
    _fetchQueue();
  }

  Future<void> _fetchQueue() async {
    try {
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.get(
        Uri.parse('https://api.r3al3r.ai/api/ethical_queue'),
        headers: {'Authorization': 'Bearer $token'},
      );
      if (response.statusCode == 200) {
        setState(() => _queue = jsonDecode(response.body)['queue']);
        if (_queue.isNotEmpty) {
          await _showNotification('Ethical Review Needed', 'New responses awaiting your approval');
        }
      } else {
        setState(() => _status = 'Error fetching queue');
      }
    } catch (e) {
      setState(() => _status = 'Error: $e');
    }
  }

  Future<void> _approveResponse(String responseId, bool approved) async {
    try {
      final token = await storage.read(key: 'token');
      if (JwtDecoder.isExpired(token!)) await _refreshToken();
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/api/approve_response'),
        headers: {'Content-Type': 'application/json', 'Authorization': 'Bearer $token'},
        body: jsonEncode({'response_id': responseId, 'approved': approved}),
      );
      if (response.statusCode == 200) {
        setState(() {
          _status = 'Response updated';
          _fetchQueue();
        });
      } else {
        setState(() => _status = 'Approval failed');
      }
    } catch (e) {
      setState(() => _status = 'Error: $e');
    }
  }

  Future<void> _refreshToken() async {
    final refreshToken = await storage.read(key: 'refresh_token');
    if (refreshToken != null) {
      final response = await http.post(
        Uri.parse('https://api.r3al3r.ai/refresh_token'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({'refresh_token': refreshToken}),
      );
      if (response.statusCode == 200) {
        final newToken = jsonDecode(response.body)['token'];
        await storage.write(key: 'token', value: newToken);
        return;
      }
    }
    Navigator.pushReplacementNamed(context, '/login');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Ethical Review')),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            TailwindCard(
              className: 'm-4 p-4 bg-gray-100 rounded',
              child: Text('Pending Reviews: ${_queue.length}'),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: _queue.length,
                itemBuilder: (context, index) {
                  final item = _queue[index];
                  return TailwindCard(
                    className: 'm-2 p-2 bg-white rounded',
                    child: Column(
                      children: [
                        Text('Query: ${sanitizeInput(item['query'])}'),
                        Text('Response: ${sanitizeInput(item['response'])}'),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            TailwindButton(
                              onPressed: () => _approveResponse(item['response_id'], true),
                              child: Text('Approve'),
                              className: 'bg-green-500 text-white p-1 rounded',
                            ),
                            TailwindButton(
                              onPressed: () => _approveResponse(item['response_id'], false),
                              child: Text('Reject'),
                              className: 'bg-red-500 text-white p-1 rounded',
                            ),
                          ],
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
            if (_status.isNotEmpty)
              Text(_status, style: TextStyle(color: _status.contains('Error') ? Colors.red : Colors.green)),
          ],
        ),
      ),
    );
  }
}